Requêtes pour tester les prédicats :

%% Tests situation_terminale
situation_terminale(o,[[o,x,x],[x,o,o],[o,x,x]]). %retourne vrai

situation_terminale(x,[[o,x,x],[x,o,o],[o,x,_]]). %retourne faux

%% Test alignement
M = [[a,b,c], [d,e,f], [g,h,i]], alignement(Ali, M). %retourne 8 solutions

%% Tests possible
A=[_,_,_], possible(A,x). %retourne vrai
A=[x,_,x], possible(A,x). %retourne vrai
A=[_,o,x], possible(A,x). %retourne faux

%% Tests alignement_gagnant
A=[x,x,x], alignement_gagnant(A,x). %retourne vrai
A=[x,o,x], alignement_gagnant(A,x). %retourne faux

%% Tests alignement_perdant
A=[o,o,o], alignement_perdant(A,x). %retourne vrai
A=[x,o,x], alignement_perdant(A,x). %retourne faux

%% Test successeur
M=[[o,x,x],[o,_,_],[_,_,_]], successeur(x,M,[3,1]).

%% Tests heuristique
situation_initiale(M), heuristique(x,M,H). %H=0
M=[[x,o,x],[o,_,o],[x,o,x]], heuristique(x,M,H). %H=0
M=[[_,o,_],[_,x,_],[_,_,_]], heuristique(x,M,H). %H=2
M=[[_,o,_],[_,x,_],[_,_,_]], heuristique(o,M,H). %H=-2

------


%%2. Développement de l’algorithme Negamax
%% Quelprédicatpermet de connaître sous forme de liste l’ensemble des couples[Coord, Situation_Resultante]tels que chaque élément (couple) associe le coup d’un joueur et la situation qui en résulte à partir d’une situation donnée.

successeurs(J,Etat,Succ) :-
	copy_term(Etat, Etat_Suiv),
	findall([Coup,Etat_Suiv],
		    successeur(J,Etat_Suiv,Coup),
		    Succ).

situation_initiale(M), successeurs(X,M,Succ).





% repondre aux questions des sujets

fournir le code
et utiliser le code pour faire des tests
 > taquin 3x3, 4x4...)
 > expliquer l'heuristique avec la SI et la SF
 > "vendre notre code"
 > dimanche semaine prochaine (07/04) par mail à : esquirol@insa-toulouse.fr et rbailonr@laas.fr


col(C,M) :- maplist(nth1(N), M, C).
